status: 200
x-powered-by: Express
access-control-allow-origin: *
content-type: application/json; charset=utf-8
content-length: 8579
etag: W/"2183-anFoc7ndIMTcSQYP/wqaeF34D1Y"
date: Mon, 04 Mar 2019 11:16:36 GMT
connection: keep-alive
content-location: http://localhost:8080/file/

[{"_id":"5c7d0618f84a7724301442e9","fileName":"main.py","fileData":"\"\"\"Main file containing running loop of program.\"\"\"\nfrom RPi import GPIO  # noqa: I003\n\nimport config # load environment variables\nimport os  # noqa: I001\nimport read_file as rf  # noqa: I001\nimport time  # noqa: I001\nimport smbus  # noqa: I001\nimport httplib2\nimport Adafruit_GPIO.SPI as SPI\nimport Adafruit_SSD1306\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\nimport subprocess\n\n\n\"\"\"\nSet up display settings\n\"\"\"\n# Raspberry Pi pin configuration:\nRST = None     # on the PiOLED this pin isnt used\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n\ndisp.begin()\n\n# Clear display.\ndisp.clear()\ndisp.display()\n\n# Create blank image for drawing.\n# Make sure to create image with mode '1' for 1-bit color.\nwidth = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n\n#lcd border settings\npadding = -2\ntop = padding\nbottom = height-padding\n\nfont = ImageFont.truetype(config.FONT_PATH, 23)\n\n\ni2c_ch = 1\nadc_add = 0x68\nbus = smbus.SMBus(i2c_ch)\ncon = 24\nbus.write_byte(adc_add, con)\n\n# pin setup\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nGPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Power , GPIO-18\nGPIO.setup(23, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Start/Stop , GPIO - 23\nGPIO.setup(25, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Real time/ Average , GPIO - 25\n\n\ndef request(url, method):\n    \"\"\"HTTP request function.\"\"\"\n    h = httplib2.Http(\".cache\")\n    return h.request(url, method)\n\n# button interupt functions\ndef power_callback(channel):\n    \"\"\"Shut down interupt.\"\"\"\n    print(\"Power Off\")\n    request(config.API_URL + \"/reading\", \"POST\")\n    os.system(\"shutdown now -h\")\n\n\ndef start_callback(channel):\n    \"\"\"Start/Stop reading interupt.\"\"\"\n    global start\n    start = not start\n    if (not start):\n        request(config.API_URL + \"/reading\", \"POST\")\n        print(\"STOP READING\")\n    else:\n        print(\"START READING\")\n\n\ndef mode_callback(channel):\n    \"\"\"Average reading/Continuous reading modes interupt.\"\"\"\n    global real_time\n    real_time = not real_time\n    if (not real_time):\n        print(\"AVERAGE READINGS\")\n    else:\n        print(\"REAL TIME READINGS\")\n\n\ndef av_list(list):\n    \"\"\"Get average of last 3 readings.\"\"\"\n    length = len(list)\n    tot = 0\n    for i in range(0, length):\n        tot = tot + list[i]\n    av = tot / length\n    return av\n\n\n# button interupt setup\nGPIO.add_event_detect(18, GPIO.FALLING, callback=power_callback, bouncetime=500)\nGPIO.add_event_detect(23, GPIO.FALLING, callback=start_callback, bouncetime=500)\nGPIO.add_event_detect(25, GPIO.FALLING, callback=mode_callback, bouncetime=500)\n\n# initial values\nstart = False\nreal_time = True\nmag = rf.get_sample()\nmag_list = [mag]\nval = 0\n\n# main loop\nwhile(1):\n    if(start):                     # only starts reading in start mode\n        # Draw a black filled box to clear the image.\n        draw.rectangle((0,0,width,height), outline=0, fill=0)\n        mag = rf.get_sample()       # reads sample\n        request(config.API_URL + \"/reading/\" + str(mag), \"POST\")\n        mag_list.append(mag)        # adds to a list of the previous 10 values\n\n        # deletes the first value if there are more than 10 in the list\n        if(len(mag_list) > 10):\n            del mag_list[0]\n        # if in real time mode print value is just the last reading\n        if (real_time):\n            val = mag\n        # if in average mode print value is the average of the list\n        else:\n            val = av_list(mag_list)\n        print(val)                  # prints the print value\n        #write text\n        draw.text((0, top),       str(val) + \"V\",  font=font, fill=255)\n\n        # Display image.\n        disp.image(image)\n        disp.display()\n    time.sleep(.3)\n","createdAt":"2019-03-04T11:03:52.911Z"},{"_id":"5c7d066126e8a228058622db","fileName":"main.py","fileData":"\"\"\"Main file containing running loop of program.\"\"\"\nfrom RPi import GPIO  # noqa: I003\n\nimport config # load environment variables\nimport os  # noqa: I001\nimport read_file as rf  # noqa: I001\nimport time  # noqa: I001\nimport smbus  # noqa: I001\nimport httplib2\nimport Adafruit_GPIO.SPI as SPI\nimport Adafruit_SSD1306\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\nimport subprocess\n\n\n\"\"\"\nSet up display settings\n\"\"\"\n# Raspberry Pi pin configuration:\nRST = None     # on the PiOLED this pin isnt used\n# Note the following are only used with SPI:\nDC = 23\nSPI_PORT = 0\nSPI_DEVICE = 0\n\ndisp = Adafruit_SSD1306.SSD1306_128_32(rst=RST)\n\ndisp.begin()\n\n# Clear display.\ndisp.clear()\ndisp.display()\n\n# Create blank image for drawing.\n# Make sure to create image with mode '1' for 1-bit color.\nwidth = disp.width\nheight = disp.height\nimage = Image.new('1', (width, height))\n\n# Get drawing object to draw on image.\ndraw = ImageDraw.Draw(image)\n\n# Draw a black filled box to clear the image.\ndraw.rectangle((0,0,width,height), outline=0, fill=0)\n\n#lcd border settings\npadding = -2\ntop = padding\nbottom = height-padding\n\nfont = ImageFont.truetype(config.FONT_PATH, 23)\n\n\ni2c_ch = 1\nadc_add = 0x68\nbus = smbus.SMBus(i2c_ch)\ncon = 24\nbus.write_byte(adc_add, con)\n\n# pin setup\nGPIO.setmode(GPIO.BCM)\nGPIO.setwarnings(False)\n\nGPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Power , GPIO-18\nGPIO.setup(23, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Start/Stop , GPIO - 23\nGPIO.setup(25, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # Real time/ Average , GPIO - 25\n\n\ndef request(url, method):\n    \"\"\"HTTP request function.\"\"\"\n    h = httplib2.Http(\".cache\")\n    return h.request(url, method)\n\n# button interupt functions\ndef power_callback(channel):\n    \"\"\"Shut down interupt.\"\"\"\n    print(\"Power Off\")\n    request(config.API_URL + \"/reading\", \"POST\")\n    os.system(\"shutdown now -h\")\n\n\ndef start_callback(channel):\n    \"\"\"Start/Stop reading interupt.\"\"\"\n    global start\n    start = not start\n    if (not start):\n        request(config.API_URL + \"/reading\", \"POST\")\n        print(\"STOP READING\")\n    else:\n        print(\"START READING\")\n\n\ndef mode_callback(channel):\n    \"\"\"Average reading/Continuous reading modes interupt.\"\"\"\n    global real_time\n    real_time = not real_time\n    if (not real_time):\n        print(\"AVERAGE READINGS\")\n    else:\n        print(\"REAL TIME READINGS\")\n\n\ndef av_list(list):\n    \"\"\"Get average of last 3 readings.\"\"\"\n    length = len(list)\n    tot = 0\n    for i in range(0, length):\n        tot = tot + list[i]\n    av = tot / length\n    return av\n\n\n# button interupt setup\nGPIO.add_event_detect(18, GPIO.FALLING, callback=power_callback, bouncetime=500)\nGPIO.add_event_detect(23, GPIO.FALLING, callback=start_callback, bouncetime=500)\nGPIO.add_event_detect(25, GPIO.FALLING, callback=mode_callback, bouncetime=500)\n\n# initial values\nstart = False\nreal_time = True\nmag = rf.get_sample()\nmag_list = [mag]\nval = 0\n\n# main loop\nwhile(1):\n    if(start):                     # only starts reading in start mode\n        # Draw a black filled box to clear the image.\n        draw.rectangle((0,0,width,height), outline=0, fill=0)\n        mag = rf.get_sample()       # reads sample\n        request(config.API_URL + \"/reading/\" + str(mag), \"POST\")\n        mag_list.append(mag)        # adds to a list of the previous 10 values\n\n        # deletes the first value if there are more than 10 in the list\n        if(len(mag_list) > 10):\n            del mag_list[0]\n        # if in real time mode print value is just the last reading\n        if (real_time):\n            val = mag\n        # if in average mode print value is the average of the list\n        else:\n            val = av_list(mag_list)\n        print(val)                  # prints the print value\n        #write text\n        draw.text((0, top),       str(val) + \"V\",  font=font, fill=255)\n\n        # Display image.\n        disp.image(image)\n        disp.display()\n    time.sleep(.3)\n","createdAt":"2019-03-04T11:05:05.831Z"}]